# -*- coding: utf-8 -*-
"""cis550_project_backup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HEoP6G98qxeZH-FVUFjWp9_yW6B7mYB0

# Section 1: Installing and Importing Needed Packages
"""

from google.colab import drive

!pip3 install boto3
!pip install pandasql

import numpy as np 
import json
import matplotlib
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
from datetime import datetime
import glob
import seaborn as sns
import re
import os
import pandasql as ps #SQL on Pandas Dataframe
from pandasql import sqldf
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

!apt install libkrb5-dev
!wget https://www-us.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz
!tar xf spark-2.4.5-bin-hadoop2.7.tgz
!pip install findspark
!pip install sparkmagic
!pip install pyspark
!pip install pyspark --user
!pip install seaborn --user
!pip install plotly --user
!pip install imageio --user
!pip install folium --user

!apt update
!apt install gcc python-dev libkrb5-dev

from pyspark.sql import SparkSession
from pyspark.sql.types import *
import pyspark.sql.functions as F
from pyspark import SparkFiles

import os

spark = SparkSession.builder.appName('mcit550-final_project').getOrCreate()

"""# Section 2: Importing Raw Data Files and Processing

Sources: 

*   https://www.imdb.com/interfaces/

---





"""

# Mounting drive
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Getting Basic Title data from Google Drive folder

title_basics = open("/content/gdrive/MyDrive/IMDb_Dataset/title_basics.tsv")
title_basics_df = pd.read_csv(title_basics, sep='\t', na_values='\\N',header=0)
#title_basics_df.head()
#title_basics_df.dtypes
#title_basics_df.describe()

#Getting the distinct values of titleType
pysqldf = lambda q: sqldf(q, globals())

q = """SELECT distinct titleType 
       FROM title_basics_df 
       ORDER BY titleType;"""

types = pysqldf(q)
types

#Select only tvSeries and then use these to truncate all other tables

q = """SELECT * 
       FROM title_basics_df 
       WHERE titleType = "tvSeries";"""

title_basics_df_2 = pysqldf(q)

#Check truncated dataframe
#title_basics_df_2.head(20)
title_basics_df_2.describe()

#Getting Basic Title into Titles (dropping genres)

Titles_df = title_basics_df_2.rename(columns={'tconst':'tid','titleType':'type','primaryTitle':'pTitle','originalTitle':'oTitle'})
Titles_df = Titles_df.drop(columns={'genres'})
Titles_df.head()

Titles_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Titles.tsv',index=False,na_rep=r'\N',sep='\t')

#From Basic Title, exploding out Genres

Genres_df = title_basics_df_2[['tconst','genres']]
Genres_df = Genres_df.rename(columns={'tconst':'tid','genres':'genre'})

Genres_df = Genres_df.dropna()

Genres_df = Genres_df.assign(genre=Genres_df.genre.str.split(',')).explode('genre').reset_index(drop=True)

Genres_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Genres.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Title Ratings data from Google Drive folder

title_ratings = open("/content/gdrive/MyDrive/IMDb_Dataset/title_ratings.tsv")
title_ratings_df = pd.read_csv(title_ratings, sep='\t', na_values='\\N',header=0)
title_ratings_df.head()
#title_ratings_df.describe()

#Truncate list to tvSeries
q = """SELECT r.tconst AS tconst, averageRating, numVotes
       FROM title_basics_df_2 t JOIN title_ratings_df r ON t.tconst = r.tconst ;"""

title_ratings_df_2 = pysqldf(q)

#Check truncated dataframe
title_ratings_df_2.head(20)
title_ratings_df_2.describe()

#Cleaning Title Ratings into Ratings

Ratings_df = title_ratings_df_2.rename(columns={'tconst':'tid','averageRating':'aveRating','numVotes':'numvotes'})
Ratings_df.head()

Ratings_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Ratings.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Episode Title data from Google Drive folder

title_episode = open("/content/gdrive/MyDrive/IMDb_Dataset/title_episode.tsv")
title_episode_df = pd.read_csv(title_episode, sep='\t', na_values='\\N',header=0)
title_episode_df.head()
#title_episode_df.describe()

#Truncate list to tvEpisodes in the titles dataframe

q = """SELECT *
      FROM title_episode_df
      WHERE parentTconst IN (SELECT DISTINCT tconst FROM title_basics_df_2);"""

title_episode_df_2 = pysqldf(q)

#Check truncated dataframe
title_episode_df_2.head(20)
title_episode_df_2.describe()

#Getting Episode Title into EpisodeTitles

EpisodeTitles_df = title_episode_df_2.rename(columns={'tconst':'episodeId','parentTconst':'parentId',
                                                    'seasonNumber':'seasonNum','episodeNumber':'episodeNum'})
EpisodeTitles_df.head()

EpisodeTitles_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/EpisodeTitles.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Crew Title data from Google Drive folder

title_crew = open("/content/gdrive/MyDrive/IMDb_Dataset/title_crew.tsv")
title_crew_df = pd.read_csv(title_crew, sep='\t', na_values='\\N',header=0)
#title_crew_df.head()
title_crew_df.describe()

#Truncate list to tvSeries in the titles dataframe

q = """SELECT r.tconst AS tconst, directors, writers
       FROM title_basics_df_2 t JOIN title_crew_df r ON t.tconst = r.tconst ;"""

title_crew_df_2 = pysqldf(q)

#Check truncated dataframe
title_crew_df_2.head(20)
title_crew_df_2.describe()

#Getting Crew Title into Directors
Directors_df = title_crew_df_2[['tconst','directors']]
Directors_df = Directors_df.rename(columns={'tconst':'tid','directors':'pid'})
Directors_df = Directors_df.dropna()
Directors_df = Directors_df.assign(pid=Directors_df.pid.str.split(',')).explode('pid').reset_index(drop=True)
Directors_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Directors.tsv',index=False,na_rep=r'\N',sep='\t')

#Getting Crew Title into Writers
Writers_df = title_crew_df_2[['tconst','writers']]
Writers_df = Writers_df.rename(columns={'tconst':'tid','writers':'pid'})
Writers_df = Writers_df.dropna()
Writers_df = Writers_df.assign(pid=Writers_df.pid.str.split(',')).explode('pid').reset_index(drop=True)
Writers_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Writers.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Title Akas data from Google Drive folder

title_akas = open("/content/gdrive/MyDrive/IMDb_Dataset/title_akas.tsv")
title_akas_df = pd.read_csv(title_akas, sep='\t', na_values='\\N',header=0)
title_akas_df.head()
#title_akas_df.describe()

#Truncate list to tvSeries in the titles dataframe

q = """SELECT *
      FROM title_akas_df
      WHERE titleId IN (SELECT DISTINCT tconst FROM title_basics_df_2);"""

title_akas_df_2 = pysqldf(q)

#Check truncated dataframe
title_akas_df_2.head(20)
title_akas_df_2.describe()

#Getting Title Akas into AdditionalTitles
AdditionalTitles_df = title_akas_df_2.rename(columns={'titleId':'tid','isOriginalTitle':'isOriginal'})
AdditionalTitles_df = AdditionalTitles_df.drop(columns={'attributes','types'})
AdditionalTitles_df.head()

AdditionalTitles_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/AdditionalTitles.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Principal Title data from Google Drive folder

title_principal = open("/content/gdrive/MyDrive/IMDb_Dataset/title_principals.tsv")
title_principal_df = pd.read_csv(title_principal, sep='\t', na_values='\\N',header=0)
title_principal_df.head()
#title_principal_df.describe()

#Cleaning Principal Title into PrincipalTitle

PrincipalTitle_df = title_principal_df.drop(columns={'characters'})
PrincipalTitle_df = PrincipalTitle_df.rename(columns={'tconst':'tid','nconst':'pid'})
PrincipalTitle_df.head()
#PrincipalTitle_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/PrincipalTitle.tsv',index=False,na_rep=r'\N',sep='\t')

#Truncate list to tvSeries in the titles dataframe

q = """SELECT r.tid AS tid, ordering, pid, category, job
       FROM title_basics_df_2 t JOIN PrincipalTitle_df r ON t.tconst = r.tid
      ;"""

PrincipalTitle_df_2 = pysqldf(q)

#Check truncated dataframe and output PrincipalTitle
PrincipalTitle_df_2.head(20)
#PrincipalTitle_df_2.describe()
#PrincipalTitle_df_2.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/PrincipalTitle.tsv',index=False,na_rep=r'\N',sep='\t')

#Cleaning Principal Title into Cast_In

Cast_In_df = title_principal_df[['tconst','nconst','characters']]
Cast_In_df = Cast_In_df.rename(columns={'tconst':'tid','nconst':'pid','characters':'character'})
Cast_In_df = Cast_In_df.dropna()
Cast_In_df.character = Cast_In_df.character.str.replace('[\"\[\]]','',regex=True)
Cast_In_df.character = Cast_In_df.character.str.replace('\\','|',regex=True)
Cast_In_df = Cast_In_df.assign(character=Cast_In_df.character.str.split(',')).explode('character').reset_index(drop=True)
Cast_In_df.character= Cast_In_df.character.str.title()
Cast_In_df.character = Cast_In_df.character.str.replace('^ | $','',regex=True)
Cast_In_df = Cast_In_df.drop_duplicates(keep=False)
Cast_In_df.head(15)
#Cast_In_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Cast_In.tsv',index=False,na_rep=r'\N',sep='\t')

#Truncate list to tvSeries in the titles dataframe

q = """SELECT r.tid AS tid, pid, character
       FROM title_basics_df_2 t JOIN Cast_In_df r ON t.tconst = r.tid
      ;"""

Cast_In_df_2 = pysqldf(q)

Cast_In_df_2.head(20)
Cast_In_df_2.describe()
Cast_In_df_2.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Cast_In.tsv',index=False,na_rep=r'\N',sep='\t')

# Getting Basic Name data from Google Drive folder

name_basics = open("/content/gdrive/MyDrive/IMDb_Dataset/name_basics.tsv")
name_basics_df = pd.read_csv(name_basics, sep='\t', na_values='\\N',header=0)
#name_basics_df.head()
name_basics_df.dtypes

#Truncate list to pid in the PrincipalTitle dataframe

q = """SELECT *
      FROM name_basics_df
      WHERE nconst IN (SELECT DISTINCT pid FROM PrincipalTitle_df_2);"""

name_basics_df_2 = pysqldf(q)

#Check truncated dataframe
name_basics_df_2.head(20)
name_basics_df_2.describe()

#Cleaning Basic Name DF into IMDBPerson

IMDBPerson_df = name_basics_df_2.drop(columns={'primaryProfession','knownForTitles'})
IMDBPerson_df = IMDBPerson_df.rename(columns={'nconst':'pid','primaryName':'name'})
#IMDBPerson_df
IMDBPerson_df.head()

IMDBPerson_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/IMDBPerson.tsv',index=False,na_rep=r'\N',sep='\t')

#Getting Basic Name into Professions 

Professions_df = name_basics_df_2[['nconst','primaryProfession']]
Professions_df = Professions_df.rename(columns={'nconst':'pid','primaryProfession':'profession'})
Professions_df = Professions_df.dropna()
Professions_df = Professions_df.assign(profession=Professions_df.profession.str.split(',')).explode('profession').reset_index(drop=True)
Professions_df.head()
Professions_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/Professions.tsv',index=False,na_rep=r'\N',sep='\t')

#Getting Basic Name into KnownForTitles

KnownForTitles_df = name_basics_df_2[['nconst','knownForTitles']]
KnownForTitles_df = KnownForTitles_df.rename(columns={'nconst':'pid','knownForTitles':'knownFor'})
KnownForTitles_df = KnownForTitles_df.dropna()
KnownForTitles_df = KnownForTitles_df.assign(knownFor=KnownForTitles_df.knownFor.str.split(',')).explode('knownFor').reset_index(drop=True)
KnownForTitles_df.head()
KnownForTitles_df.to_csv('/content/gdrive/MyDrive/IMDb_Dataset/Processed/KnownForTitles.tsv',index=False,na_rep=r'\N',sep='\t')

"""#Section 3: Final List of Files Exported From Pre-Processing 


*   Additional Titles
*   Cast_In
*   Directors
*   Episode Titles
*   Genres
*   IMDB Person
*   Known For Titles
*   Principal Title
*   Professions
*   Ratings
*   Titles
*   Writers









"""